
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000be2  00000c56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c88  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c8f  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000743  00000000  00000000  000019c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062e  00000000  00000000  0000210a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00002738  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000453  00000000  00000000  0000284c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e5  00000000  00000000  00002c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 95 03 	jmp	0x72a	; 0x72a <__vector_3>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 49 03 	call	0x692	; 0x692 <main>
  8e:	0c 94 ef 05 	jmp	0xbde	; 0xbde <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <pwm_init>:
void pwm_init(){
	
	//// PWM_0 /////
	
	//modo fast pwm sin limite
	TCCR0A |= (1<<WGM00) ;
  96:	84 b5       	in	r24, 0x24	; 36
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |=(1<<WGM01) ;
  9c:	84 b5       	in	r24, 0x24	; 36
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	84 bd       	out	0x24, r24	; 36
	
	//clock prescaler: n=8
	
	TCCR0B &=~(1<<CS00); 
  a2:	85 b5       	in	r24, 0x25	; 37
  a4:	8e 7f       	andi	r24, 0xFE	; 254
  a6:	85 bd       	out	0x25, r24	; 37
	TCCR0B |=(1<<CS01); 
  a8:	85 b5       	in	r24, 0x25	; 37
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	85 bd       	out	0x25, r24	; 37
	TCCR0B &=~(1<<CS02); 
  ae:	85 b5       	in	r24, 0x25	; 37
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	85 bd       	out	0x25, r24	; 37
		
		
	///// PWM_2 ////////
	
	//modo fast pwm sin limite
	TCCR2A |= (1<<WGM20) ;
  b4:	e0 eb       	ldi	r30, 0xB0	; 176
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	80 83       	st	Z, r24
	TCCR2A |=(1<<WGM21) ;
  be:	80 81       	ld	r24, Z
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	80 83       	st	Z, r24
	
	//clock prescaler: n=8
	
	TCCR2B &=~(1<<CS20); 
  c4:	e1 eb       	ldi	r30, 0xB1	; 177
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	80 83       	st	Z, r24
	TCCR2B |=(1<<CS21); 
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 83       	st	Z, r24
	TCCR2B &=~(1<<CS22); 
  d4:	80 81       	ld	r24, Z
  d6:	8b 7f       	andi	r24, 0xFB	; 251
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <setDuty_channel1>:
}

//ROJO
void setDuty_channel1 (float  duty){
	//OCR0 como salida
	DDRD |= (1<< DDD6);
  dc:	56 9a       	sbi	0x0a, 6	; 10
	
	//señal no invertida
	TCCR0A |= (1<<COM0A1);
  de:	24 b5       	in	r18, 0x24	; 36
  e0:	20 68       	ori	r18, 0x80	; 128
  e2:	24 bd       	out	0x24, r18	; 36
	
	//luminosidad(duty)
	OCR0A= 255.0f - (255.0f * (duty/100)) ;
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	48 ec       	ldi	r20, 0xC8	; 200
  ea:	52 e4       	ldi	r21, 0x42	; 66
  ec:	0e 94 2a 04 	call	0x854	; 0x854 <__divsf3>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	4f e7       	ldi	r20, 0x7F	; 127
  f6:	53 e4       	ldi	r21, 0x43	; 67
  f8:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
  fc:	9b 01       	movw	r18, r22
  fe:	ac 01       	movw	r20, r24
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	8f e7       	ldi	r24, 0x7F	; 127
 106:	93 e4       	ldi	r25, 0x43	; 67
 108:	0e 94 b8 03 	call	0x770	; 0x770 <__subsf3>
 10c:	0e 94 9c 04 	call	0x938	; 0x938 <__fixunssfsi>
 110:	67 bd       	out	0x27, r22	; 39
 112:	08 95       	ret

00000114 <setDuty_channel2>:
}

//AZUL
void setDuty_channel2 (float duty){
	
	DDRB |= (1<< DDB3);
 114:	23 9a       	sbi	0x04, 3	; 4
	//señal no invertida
	TCCR2A |= (1<<COM2A1);
 116:	e0 eb       	ldi	r30, 0xB0	; 176
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	20 81       	ld	r18, Z
 11c:	20 68       	ori	r18, 0x80	; 128
 11e:	20 83       	st	Z, r18
	
	//luminosidad
	OCR2A= 255.0f - (255.0f * (duty/100)) ;
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	48 ec       	ldi	r20, 0xC8	; 200
 126:	52 e4       	ldi	r21, 0x42	; 66
 128:	0e 94 2a 04 	call	0x854	; 0x854 <__divsf3>
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	4f e7       	ldi	r20, 0x7F	; 127
 132:	53 e4       	ldi	r21, 0x43	; 67
 134:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 138:	9b 01       	movw	r18, r22
 13a:	ac 01       	movw	r20, r24
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	8f e7       	ldi	r24, 0x7F	; 127
 142:	93 e4       	ldi	r25, 0x43	; 67
 144:	0e 94 b8 03 	call	0x770	; 0x770 <__subsf3>
 148:	0e 94 9c 04 	call	0x938	; 0x938 <__fixunssfsi>
 14c:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 150:	08 95       	ret

00000152 <setDuty_channel3>:

}
//VERDE
void setDuty_channel3 (float duty){
	
	DDRD |= (1<< DDD3);
 152:	53 9a       	sbi	0x0a, 3	; 10
	
	//señal no invertida
	TCCR2A |= (1<<COM2B1);
 154:	e0 eb       	ldi	r30, 0xB0	; 176
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	20 81       	ld	r18, Z
 15a:	20 62       	ori	r18, 0x20	; 32
 15c:	20 83       	st	Z, r18
	
	//luminosidad
	OCR2B= 255.0f - (255.0f * (duty/100)) ;
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	48 ec       	ldi	r20, 0xC8	; 200
 164:	52 e4       	ldi	r21, 0x42	; 66
 166:	0e 94 2a 04 	call	0x854	; 0x854 <__divsf3>
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	4f e7       	ldi	r20, 0x7F	; 127
 170:	53 e4       	ldi	r21, 0x43	; 67
 172:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 176:	9b 01       	movw	r18, r22
 178:	ac 01       	movw	r20, r24
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	8f e7       	ldi	r24, 0x7F	; 127
 180:	93 e4       	ldi	r25, 0x43	; 67
 182:	0e 94 b8 03 	call	0x770	; 0x770 <__subsf3>
 186:	0e 94 9c 04 	call	0x938	; 0x938 <__fixunssfsi>
 18a:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 18e:	08 95       	ret

00000190 <ADC_init>:

void ADC_init()
{
	// Output adjust = right // bits se alinean a la derecha
	
	ADMUX &=~ (1<<ADLAR);
 190:	ec e7       	ldi	r30, 0x7C	; 124
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	80 83       	st	Z, r24

	// Voltage Reference = AVCC with external capacitor at ARef//
	ADMUX |=  (1<<REFS0); // 5V
 19a:	80 81       	ld	r24, Z
 19c:	80 64       	ori	r24, 0x40	; 64
 19e:	80 83       	st	Z, r24
	ADMUX &=~ (1<<REFS1);
 1a0:	80 81       	ld	r24, Z
 1a2:	8f 77       	andi	r24, 0x7F	; 127
 1a4:	80 83       	st	Z, r24

	// Frequency divisor = 128 -> 16000/128 = 125 KHz
	ADCSRA |= (1<<ADPS0);
 1a6:	ea e7       	ldi	r30, 0x7A	; 122
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1);
 1b0:	80 81       	ld	r24, Z
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2);
 1b6:	80 81       	ld	r24, Z
 1b8:	84 60       	ori	r24, 0x04	; 4
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <ADC_GetData>:
}

int ADC_GetData(int canal)
{
	// Selecci?n del canal de lADC // ADMUX = 0 -> ADC0
	ADMUX &=~  0x0F;
 1be:	ec e7       	ldi	r30, 0x7C	; 124
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	90 81       	ld	r25, Z
 1c4:	90 7f       	andi	r25, 0xF0	; 240
 1c6:	90 83       	st	Z, r25
	ADMUX |=  canal;
 1c8:	90 81       	ld	r25, Z
 1ca:	89 2b       	or	r24, r25
 1cc:	80 83       	st	Z, r24
	//DEBEMOS SELECCIONAR EL CANAL 0.
	
	// Encendemos en ADC
	ADCSRA |= (1<<ADEN);
 1ce:	ea e7       	ldi	r30, 0x7A	; 122
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 68       	ori	r24, 0x80	; 128
 1d6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	85 e3       	ldi	r24, 0x35	; 53
 1da:	8a 95       	dec	r24
 1dc:	f1 f7       	brne	.-4      	; 0x1da <ADC_GetData+0x1c>
 1de:	00 00       	nop
	_delay_us(10);	// Esperamos a que caliente

	// Mandamos el muestreo, single conversion mode
	ADCSRA |= (1<<ADSC);
 1e0:	80 81       	ld	r24, Z
 1e2:	80 64       	ori	r24, 0x40	; 64
 1e4:	80 83       	st	Z, r24

	// Esperamos a que muestree, leyendo el flag
	while( !(ADCSRA & (1<<ADIF)) );
 1e6:	80 81       	ld	r24, Z
 1e8:	84 ff       	sbrs	r24, 4
 1ea:	fd cf       	rjmp	.-6      	; 0x1e6 <ADC_GetData+0x28>
	ADCSRA |= (1<<ADIF);	// Reiniciamos el flag
 1ec:	ea e7       	ldi	r30, 0x7A	; 122
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	80 61       	ori	r24, 0x10	; 16
 1f4:	80 83       	st	Z, r24

	// Apagamos el ADC
	ADCSRA &=~ (1<<ADEN);
 1f6:	80 81       	ld	r24, Z
 1f8:	8f 77       	andi	r24, 0x7F	; 127
 1fa:	80 83       	st	Z, r24

	return ADC;
 1fc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 200:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 204:	08 95       	ret

00000206 <Convert_chanel1>:


void Convert_chanel1(int state)
{
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
	if (state==1){
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	09 f0       	breq	.+2      	; 0x214 <Convert_chanel1+0xe>
 212:	b6 c0       	rjmp	.+364    	; 0x380 <Convert_chanel1+0x17a>
		float adcV= ADC_GetData(0)*5.0f/1024.0f;
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 df 00 	call	0x1be	; 0x1be <ADC_GetData>
 21c:	bc 01       	movw	r22, r24
 21e:	99 0f       	add	r25, r25
 220:	88 0b       	sbc	r24, r24
 222:	99 0b       	sbc	r25, r25
 224:	0e 94 cd 04 	call	0x99a	; 0x99a <__floatsisf>
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	40 ea       	ldi	r20, 0xA0	; 160
 22e:	50 e4       	ldi	r21, 0x40	; 64
 230:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e8       	ldi	r20, 0x80	; 128
 23a:	5a e3       	ldi	r21, 0x3A	; 58
 23c:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 240:	6b 01       	movw	r12, r22
 242:	7c 01       	movw	r14, r24
		
		if (adcV>0.0f && adcV<0.7f){
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	a9 01       	movw	r20, r18
 24a:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 24e:	18 16       	cp	r1, r24
 250:	8c f4       	brge	.+34     	; 0x274 <Convert_chanel1+0x6e>
 252:	23 e3       	ldi	r18, 0x33	; 51
 254:	33 e3       	ldi	r19, 0x33	; 51
 256:	43 e3       	ldi	r20, 0x33	; 51
 258:	5f e3       	ldi	r21, 0x3F	; 63
 25a:	c7 01       	movw	r24, r14
 25c:	b6 01       	movw	r22, r12
 25e:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 262:	88 23       	and	r24, r24
 264:	3c f4       	brge	.+14     	; 0x274 <Convert_chanel1+0x6e>
			setDuty_channel1(2);
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e4       	ldi	r25, 0x40	; 64
 26e:	0e 94 6e 00 	call	0xdc	; 0xdc <setDuty_channel1>
 272:	86 c0       	rjmp	.+268    	; 0x380 <Convert_chanel1+0x17a>
		}
		
		else if (adcV >= 0.7f && adcV< 1.0f)
 274:	23 e3       	ldi	r18, 0x33	; 51
 276:	33 e3       	ldi	r19, 0x33	; 51
 278:	43 e3       	ldi	r20, 0x33	; 51
 27a:	5f e3       	ldi	r21, 0x3F	; 63
 27c:	c7 01       	movw	r24, r14
 27e:	b6 01       	movw	r22, r12
 280:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 284:	88 23       	and	r24, r24
 286:	8c f0       	brlt	.+34     	; 0x2aa <Convert_chanel1+0xa4>
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	40 e8       	ldi	r20, 0x80	; 128
 28e:	5f e3       	ldi	r21, 0x3F	; 63
 290:	c7 01       	movw	r24, r14
 292:	b6 01       	movw	r22, r12
 294:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 298:	88 23       	and	r24, r24
 29a:	3c f4       	brge	.+14     	; 0x2aa <Convert_chanel1+0xa4>
		{
			setDuty_channel1(5);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	80 ea       	ldi	r24, 0xA0	; 160
 2a2:	90 e4       	ldi	r25, 0x40	; 64
 2a4:	0e 94 6e 00 	call	0xdc	; 0xdc <setDuty_channel1>
 2a8:	6b c0       	rjmp	.+214    	; 0x380 <Convert_chanel1+0x17a>
			
		}
		
		else if (adcV >= 1.0f && adcV< 2.0f)
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e8       	ldi	r20, 0x80	; 128
 2b0:	5f e3       	ldi	r21, 0x3F	; 63
 2b2:	c7 01       	movw	r24, r14
 2b4:	b6 01       	movw	r22, r12
 2b6:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 2ba:	88 23       	and	r24, r24
 2bc:	8c f0       	brlt	.+34     	; 0x2e0 <Convert_chanel1+0xda>
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	50 e4       	ldi	r21, 0x40	; 64
 2c6:	c7 01       	movw	r24, r14
 2c8:	b6 01       	movw	r22, r12
 2ca:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 2ce:	88 23       	and	r24, r24
 2d0:	3c f4       	brge	.+14     	; 0x2e0 <Convert_chanel1+0xda>
		{
			setDuty_channel1(25);
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	88 ec       	ldi	r24, 0xC8	; 200
 2d8:	91 e4       	ldi	r25, 0x41	; 65
 2da:	0e 94 6e 00 	call	0xdc	; 0xdc <setDuty_channel1>
 2de:	50 c0       	rjmp	.+160    	; 0x380 <Convert_chanel1+0x17a>
			
		}
		
		else if (adcV >= 2.0f && adcV< 3.0f)
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	50 e4       	ldi	r21, 0x40	; 64
 2e8:	c7 01       	movw	r24, r14
 2ea:	b6 01       	movw	r22, r12
 2ec:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 2f0:	88 23       	and	r24, r24
 2f2:	8c f0       	brlt	.+34     	; 0x316 <Convert_chanel1+0x110>
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	40 e4       	ldi	r20, 0x40	; 64
 2fa:	50 e4       	ldi	r21, 0x40	; 64
 2fc:	c7 01       	movw	r24, r14
 2fe:	b6 01       	movw	r22, r12
 300:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 304:	88 23       	and	r24, r24
 306:	3c f4       	brge	.+14     	; 0x316 <Convert_chanel1+0x110>
		{
			setDuty_channel1(50);
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	88 e4       	ldi	r24, 0x48	; 72
 30e:	92 e4       	ldi	r25, 0x42	; 66
 310:	0e 94 6e 00 	call	0xdc	; 0xdc <setDuty_channel1>
 314:	35 c0       	rjmp	.+106    	; 0x380 <Convert_chanel1+0x17a>
			
		}
		
		else if (adcV >= 3.0f && adcV< 4.0f)
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	40 e4       	ldi	r20, 0x40	; 64
 31c:	50 e4       	ldi	r21, 0x40	; 64
 31e:	c7 01       	movw	r24, r14
 320:	b6 01       	movw	r22, r12
 322:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 326:	88 23       	and	r24, r24
 328:	8c f0       	brlt	.+34     	; 0x34c <Convert_chanel1+0x146>
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	40 e8       	ldi	r20, 0x80	; 128
 330:	50 e4       	ldi	r21, 0x40	; 64
 332:	c7 01       	movw	r24, r14
 334:	b6 01       	movw	r22, r12
 336:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 33a:	88 23       	and	r24, r24
 33c:	3c f4       	brge	.+14     	; 0x34c <Convert_chanel1+0x146>
		{
			setDuty_channel1(75);
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	86 e9       	ldi	r24, 0x96	; 150
 344:	92 e4       	ldi	r25, 0x42	; 66
 346:	0e 94 6e 00 	call	0xdc	; 0xdc <setDuty_channel1>
 34a:	1a c0       	rjmp	.+52     	; 0x380 <Convert_chanel1+0x17a>
			
		}
		
		else if (adcV >= 4.0f && adcV< 5.0f)
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	40 e8       	ldi	r20, 0x80	; 128
 352:	50 e4       	ldi	r21, 0x40	; 64
 354:	c7 01       	movw	r24, r14
 356:	b6 01       	movw	r22, r12
 358:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 35c:	88 23       	and	r24, r24
 35e:	84 f0       	brlt	.+32     	; 0x380 <Convert_chanel1+0x17a>
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	40 ea       	ldi	r20, 0xA0	; 160
 366:	50 e4       	ldi	r21, 0x40	; 64
 368:	c7 01       	movw	r24, r14
 36a:	b6 01       	movw	r22, r12
 36c:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 370:	88 23       	and	r24, r24
 372:	34 f4       	brge	.+12     	; 0x380 <Convert_chanel1+0x17a>
		{
			setDuty_channel1(100);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	88 ec       	ldi	r24, 0xC8	; 200
 37a:	92 e4       	ldi	r25, 0x42	; 66
 37c:	0e 94 6e 00 	call	0xdc	; 0xdc <setDuty_channel1>
				
	}
	
	
		
}
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	df 90       	pop	r13
 386:	cf 90       	pop	r12
 388:	08 95       	ret

0000038a <Convert_chanel2>:

void Convert_chanel2(int state2)
{
 38a:	cf 92       	push	r12
 38c:	df 92       	push	r13
 38e:	ef 92       	push	r14
 390:	ff 92       	push	r15
	if (state2==1){
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	09 f0       	breq	.+2      	; 0x398 <Convert_chanel2+0xe>
 396:	b6 c0       	rjmp	.+364    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
		float adcV= ADC_GetData(0)*5.0f/1024.0f;
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 df 00 	call	0x1be	; 0x1be <ADC_GetData>
 3a0:	bc 01       	movw	r22, r24
 3a2:	99 0f       	add	r25, r25
 3a4:	88 0b       	sbc	r24, r24
 3a6:	99 0b       	sbc	r25, r25
 3a8:	0e 94 cd 04 	call	0x99a	; 0x99a <__floatsisf>
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	40 ea       	ldi	r20, 0xA0	; 160
 3b2:	50 e4       	ldi	r21, 0x40	; 64
 3b4:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	40 e8       	ldi	r20, 0x80	; 128
 3be:	5a e3       	ldi	r21, 0x3A	; 58
 3c0:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 3c4:	6b 01       	movw	r12, r22
 3c6:	7c 01       	movw	r14, r24
		
		if (adcV>0.0f && adcV<0.7f){
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	a9 01       	movw	r20, r18
 3ce:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 3d2:	18 16       	cp	r1, r24
 3d4:	8c f4       	brge	.+34     	; 0x3f8 <Convert_chanel2+0x6e>
 3d6:	23 e3       	ldi	r18, 0x33	; 51
 3d8:	33 e3       	ldi	r19, 0x33	; 51
 3da:	43 e3       	ldi	r20, 0x33	; 51
 3dc:	5f e3       	ldi	r21, 0x3F	; 63
 3de:	c7 01       	movw	r24, r14
 3e0:	b6 01       	movw	r22, r12
 3e2:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 3e6:	88 23       	and	r24, r24
 3e8:	3c f4       	brge	.+14     	; 0x3f8 <Convert_chanel2+0x6e>
			setDuty_channel2(2);
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e4       	ldi	r25, 0x40	; 64
 3f2:	0e 94 8a 00 	call	0x114	; 0x114 <setDuty_channel2>
 3f6:	86 c0       	rjmp	.+268    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
		}
		
		else if (adcV >= 0.7f && adcV< 1.0f)
 3f8:	23 e3       	ldi	r18, 0x33	; 51
 3fa:	33 e3       	ldi	r19, 0x33	; 51
 3fc:	43 e3       	ldi	r20, 0x33	; 51
 3fe:	5f e3       	ldi	r21, 0x3F	; 63
 400:	c7 01       	movw	r24, r14
 402:	b6 01       	movw	r22, r12
 404:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 408:	88 23       	and	r24, r24
 40a:	8c f0       	brlt	.+34     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	40 e8       	ldi	r20, 0x80	; 128
 412:	5f e3       	ldi	r21, 0x3F	; 63
 414:	c7 01       	movw	r24, r14
 416:	b6 01       	movw	r22, r12
 418:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 41c:	88 23       	and	r24, r24
 41e:	3c f4       	brge	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		{
			setDuty_channel2(5);
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	80 ea       	ldi	r24, 0xA0	; 160
 426:	90 e4       	ldi	r25, 0x40	; 64
 428:	0e 94 8a 00 	call	0x114	; 0x114 <setDuty_channel2>
 42c:	6b c0       	rjmp	.+214    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
			
		}
		
		else if (adcV >= 1.0f && adcV< 2.0f)
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	40 e8       	ldi	r20, 0x80	; 128
 434:	5f e3       	ldi	r21, 0x3F	; 63
 436:	c7 01       	movw	r24, r14
 438:	b6 01       	movw	r22, r12
 43a:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 43e:	88 23       	and	r24, r24
 440:	8c f0       	brlt	.+34     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	50 e4       	ldi	r21, 0x40	; 64
 44a:	c7 01       	movw	r24, r14
 44c:	b6 01       	movw	r22, r12
 44e:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 452:	88 23       	and	r24, r24
 454:	3c f4       	brge	.+14     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		{
			setDuty_channel2(25);
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	88 ec       	ldi	r24, 0xC8	; 200
 45c:	91 e4       	ldi	r25, 0x41	; 65
 45e:	0e 94 8a 00 	call	0x114	; 0x114 <setDuty_channel2>
 462:	50 c0       	rjmp	.+160    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
			
		}
		
		else if (adcV >= 2.0f && adcV< 3.0f)
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	50 e4       	ldi	r21, 0x40	; 64
 46c:	c7 01       	movw	r24, r14
 46e:	b6 01       	movw	r22, r12
 470:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 474:	88 23       	and	r24, r24
 476:	8c f0       	brlt	.+34     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 478:	20 e0       	ldi	r18, 0x00	; 0
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	40 e4       	ldi	r20, 0x40	; 64
 47e:	50 e4       	ldi	r21, 0x40	; 64
 480:	c7 01       	movw	r24, r14
 482:	b6 01       	movw	r22, r12
 484:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 488:	88 23       	and	r24, r24
 48a:	3c f4       	brge	.+14     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
		{
			setDuty_channel2(50);
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	88 e4       	ldi	r24, 0x48	; 72
 492:	92 e4       	ldi	r25, 0x42	; 66
 494:	0e 94 8a 00 	call	0x114	; 0x114 <setDuty_channel2>
 498:	35 c0       	rjmp	.+106    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
			
		}
		
		else if (adcV >= 3.0f && adcV< 4.0f)
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	40 e4       	ldi	r20, 0x40	; 64
 4a0:	50 e4       	ldi	r21, 0x40	; 64
 4a2:	c7 01       	movw	r24, r14
 4a4:	b6 01       	movw	r22, r12
 4a6:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 4aa:	88 23       	and	r24, r24
 4ac:	8c f0       	brlt	.+34     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ae:	20 e0       	ldi	r18, 0x00	; 0
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	40 e8       	ldi	r20, 0x80	; 128
 4b4:	50 e4       	ldi	r21, 0x40	; 64
 4b6:	c7 01       	movw	r24, r14
 4b8:	b6 01       	movw	r22, r12
 4ba:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 4be:	88 23       	and	r24, r24
 4c0:	3c f4       	brge	.+14     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
		{
			setDuty_channel2(75);
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	86 e9       	ldi	r24, 0x96	; 150
 4c8:	92 e4       	ldi	r25, 0x42	; 66
 4ca:	0e 94 8a 00 	call	0x114	; 0x114 <setDuty_channel2>
 4ce:	1a c0       	rjmp	.+52     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
			
		}
		
		else if (adcV >= 4.0f && adcV< 5.0f)
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	40 e8       	ldi	r20, 0x80	; 128
 4d6:	50 e4       	ldi	r21, 0x40	; 64
 4d8:	c7 01       	movw	r24, r14
 4da:	b6 01       	movw	r22, r12
 4dc:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 4e0:	88 23       	and	r24, r24
 4e2:	84 f0       	brlt	.+32     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	40 ea       	ldi	r20, 0xA0	; 160
 4ea:	50 e4       	ldi	r21, 0x40	; 64
 4ec:	c7 01       	movw	r24, r14
 4ee:	b6 01       	movw	r22, r12
 4f0:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 4f4:	88 23       	and	r24, r24
 4f6:	34 f4       	brge	.+12     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
		{
			setDuty_channel2(100);
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	88 ec       	ldi	r24, 0xC8	; 200
 4fe:	92 e4       	ldi	r25, 0x42	; 66
 500:	0e 94 8a 00 	call	0x114	; 0x114 <setDuty_channel2>
		
	} 
	
	
	
}
 504:	ff 90       	pop	r15
 506:	ef 90       	pop	r14
 508:	df 90       	pop	r13
 50a:	cf 90       	pop	r12
 50c:	08 95       	ret

0000050e <Convert_chanel3>:

void Convert_chanel3(int state3)
{
 50e:	cf 92       	push	r12
 510:	df 92       	push	r13
 512:	ef 92       	push	r14
 514:	ff 92       	push	r15
	if (state3==1){
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	09 f0       	breq	.+2      	; 0x51c <Convert_chanel3+0xe>
 51a:	b6 c0       	rjmp	.+364    	; 0x688 <Convert_chanel3+0x17a>
		float adcV= ADC_GetData(0)*5.0f/1024.0f;
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 df 00 	call	0x1be	; 0x1be <ADC_GetData>
 524:	bc 01       	movw	r22, r24
 526:	99 0f       	add	r25, r25
 528:	88 0b       	sbc	r24, r24
 52a:	99 0b       	sbc	r25, r25
 52c:	0e 94 cd 04 	call	0x99a	; 0x99a <__floatsisf>
 530:	20 e0       	ldi	r18, 0x00	; 0
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	40 ea       	ldi	r20, 0xA0	; 160
 536:	50 e4       	ldi	r21, 0x40	; 64
 538:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 53c:	20 e0       	ldi	r18, 0x00	; 0
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	40 e8       	ldi	r20, 0x80	; 128
 542:	5a e3       	ldi	r21, 0x3A	; 58
 544:	0e 94 82 05 	call	0xb04	; 0xb04 <__mulsf3>
 548:	6b 01       	movw	r12, r22
 54a:	7c 01       	movw	r14, r24
		
		if (adcV>0.0f && adcV<0.7f){
 54c:	20 e0       	ldi	r18, 0x00	; 0
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	a9 01       	movw	r20, r18
 552:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 556:	18 16       	cp	r1, r24
 558:	8c f4       	brge	.+34     	; 0x57c <Convert_chanel3+0x6e>
 55a:	23 e3       	ldi	r18, 0x33	; 51
 55c:	33 e3       	ldi	r19, 0x33	; 51
 55e:	43 e3       	ldi	r20, 0x33	; 51
 560:	5f e3       	ldi	r21, 0x3F	; 63
 562:	c7 01       	movw	r24, r14
 564:	b6 01       	movw	r22, r12
 566:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 56a:	88 23       	and	r24, r24
 56c:	3c f4       	brge	.+14     	; 0x57c <Convert_chanel3+0x6e>
			setDuty_channel3(2);
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	90 e4       	ldi	r25, 0x40	; 64
 576:	0e 94 a9 00 	call	0x152	; 0x152 <setDuty_channel3>
 57a:	86 c0       	rjmp	.+268    	; 0x688 <Convert_chanel3+0x17a>
		}
		
		else if (adcV >= 0.7f && adcV< 1.0f)
 57c:	23 e3       	ldi	r18, 0x33	; 51
 57e:	33 e3       	ldi	r19, 0x33	; 51
 580:	43 e3       	ldi	r20, 0x33	; 51
 582:	5f e3       	ldi	r21, 0x3F	; 63
 584:	c7 01       	movw	r24, r14
 586:	b6 01       	movw	r22, r12
 588:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 58c:	88 23       	and	r24, r24
 58e:	8c f0       	brlt	.+34     	; 0x5b2 <Convert_chanel3+0xa4>
 590:	20 e0       	ldi	r18, 0x00	; 0
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	40 e8       	ldi	r20, 0x80	; 128
 596:	5f e3       	ldi	r21, 0x3F	; 63
 598:	c7 01       	movw	r24, r14
 59a:	b6 01       	movw	r22, r12
 59c:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 5a0:	88 23       	and	r24, r24
 5a2:	3c f4       	brge	.+14     	; 0x5b2 <Convert_chanel3+0xa4>
		{
			setDuty_channel3(5);
 5a4:	60 e0       	ldi	r22, 0x00	; 0
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	80 ea       	ldi	r24, 0xA0	; 160
 5aa:	90 e4       	ldi	r25, 0x40	; 64
 5ac:	0e 94 a9 00 	call	0x152	; 0x152 <setDuty_channel3>
 5b0:	6b c0       	rjmp	.+214    	; 0x688 <Convert_chanel3+0x17a>
			
		}
		
		else if (adcV >= 1.0f && adcV< 2.0f)
 5b2:	20 e0       	ldi	r18, 0x00	; 0
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	40 e8       	ldi	r20, 0x80	; 128
 5b8:	5f e3       	ldi	r21, 0x3F	; 63
 5ba:	c7 01       	movw	r24, r14
 5bc:	b6 01       	movw	r22, r12
 5be:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 5c2:	88 23       	and	r24, r24
 5c4:	8c f0       	brlt	.+34     	; 0x5e8 <Convert_chanel3+0xda>
 5c6:	20 e0       	ldi	r18, 0x00	; 0
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	40 e0       	ldi	r20, 0x00	; 0
 5cc:	50 e4       	ldi	r21, 0x40	; 64
 5ce:	c7 01       	movw	r24, r14
 5d0:	b6 01       	movw	r22, r12
 5d2:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 5d6:	88 23       	and	r24, r24
 5d8:	3c f4       	brge	.+14     	; 0x5e8 <Convert_chanel3+0xda>
		{
			setDuty_channel3(25);
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	88 ec       	ldi	r24, 0xC8	; 200
 5e0:	91 e4       	ldi	r25, 0x41	; 65
 5e2:	0e 94 a9 00 	call	0x152	; 0x152 <setDuty_channel3>
 5e6:	50 c0       	rjmp	.+160    	; 0x688 <Convert_chanel3+0x17a>
			
		}
		
		else if (adcV >= 2.0f && adcV< 3.0f)
 5e8:	20 e0       	ldi	r18, 0x00	; 0
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	40 e0       	ldi	r20, 0x00	; 0
 5ee:	50 e4       	ldi	r21, 0x40	; 64
 5f0:	c7 01       	movw	r24, r14
 5f2:	b6 01       	movw	r22, r12
 5f4:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 5f8:	88 23       	and	r24, r24
 5fa:	8c f0       	brlt	.+34     	; 0x61e <Convert_chanel3+0x110>
 5fc:	20 e0       	ldi	r18, 0x00	; 0
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	40 e4       	ldi	r20, 0x40	; 64
 602:	50 e4       	ldi	r21, 0x40	; 64
 604:	c7 01       	movw	r24, r14
 606:	b6 01       	movw	r22, r12
 608:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 60c:	88 23       	and	r24, r24
 60e:	3c f4       	brge	.+14     	; 0x61e <Convert_chanel3+0x110>
		{
			setDuty_channel3(50);
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	88 e4       	ldi	r24, 0x48	; 72
 616:	92 e4       	ldi	r25, 0x42	; 66
 618:	0e 94 a9 00 	call	0x152	; 0x152 <setDuty_channel3>
 61c:	35 c0       	rjmp	.+106    	; 0x688 <Convert_chanel3+0x17a>
			
		}
		
		else if (adcV >= 3.0f && adcV< 4.0f)
 61e:	20 e0       	ldi	r18, 0x00	; 0
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	40 e4       	ldi	r20, 0x40	; 64
 624:	50 e4       	ldi	r21, 0x40	; 64
 626:	c7 01       	movw	r24, r14
 628:	b6 01       	movw	r22, r12
 62a:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 62e:	88 23       	and	r24, r24
 630:	8c f0       	brlt	.+34     	; 0x654 <Convert_chanel3+0x146>
 632:	20 e0       	ldi	r18, 0x00	; 0
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	40 e8       	ldi	r20, 0x80	; 128
 638:	50 e4       	ldi	r21, 0x40	; 64
 63a:	c7 01       	movw	r24, r14
 63c:	b6 01       	movw	r22, r12
 63e:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 642:	88 23       	and	r24, r24
 644:	3c f4       	brge	.+14     	; 0x654 <Convert_chanel3+0x146>
		{
			setDuty_channel3(75);
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	86 e9       	ldi	r24, 0x96	; 150
 64c:	92 e4       	ldi	r25, 0x42	; 66
 64e:	0e 94 a9 00 	call	0x152	; 0x152 <setDuty_channel3>
 652:	1a c0       	rjmp	.+52     	; 0x688 <Convert_chanel3+0x17a>
			
		}
		
		else if (adcV >= 4.0f && adcV< 5.0f)
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	40 e8       	ldi	r20, 0x80	; 128
 65a:	50 e4       	ldi	r21, 0x40	; 64
 65c:	c7 01       	movw	r24, r14
 65e:	b6 01       	movw	r22, r12
 660:	0e 94 7d 05 	call	0xafa	; 0xafa <__gesf2>
 664:	88 23       	and	r24, r24
 666:	84 f0       	brlt	.+32     	; 0x688 <Convert_chanel3+0x17a>
 668:	20 e0       	ldi	r18, 0x00	; 0
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	40 ea       	ldi	r20, 0xA0	; 160
 66e:	50 e4       	ldi	r21, 0x40	; 64
 670:	c7 01       	movw	r24, r14
 672:	b6 01       	movw	r22, r12
 674:	0e 94 25 04 	call	0x84a	; 0x84a <__cmpsf2>
 678:	88 23       	and	r24, r24
 67a:	34 f4       	brge	.+12     	; 0x688 <Convert_chanel3+0x17a>
		{
			setDuty_channel3(100);
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	88 ec       	ldi	r24, 0xC8	; 200
 682:	92 e4       	ldi	r25, 0x42	; 66
 684:	0e 94 a9 00 	call	0x152	; 0x152 <setDuty_channel3>
		}
		
	}
	
	
}
 688:	ff 90       	pop	r15
 68a:	ef 90       	pop	r14
 68c:	df 90       	pop	r13
 68e:	cf 90       	pop	r12
 690:	08 95       	ret

00000692 <main>:

volatile int mood=-1;

int main(void){
	
	pwm_init();
 692:	0e 94 4b 00 	call	0x96	; 0x96 <pwm_init>
	ADC_init();
 696:	0e 94 c8 00 	call	0x190	; 0x190 <ADC_init>
	
	DDRB |= (0<< DDB7); //boton pb7 como entrada
 69a:	84 b1       	in	r24, 0x04	; 4
 69c:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<< DDD0);
 69e:	50 9a       	sbi	0x0a, 0	; 10
	cli();	//deshabilitamos interrupciones globales
 6a0:	f8 94       	cli
	
	//configuracion de interrupciones
	
	PCICR |= (1<<PCIE0); //Habilita las interrupciones por grupo (B)
 6a2:	e8 e6       	ldi	r30, 0x68	; 104
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	81 60       	ori	r24, 0x01	; 1
 6aa:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT7); //Restringimos la interrupcion
 6ac:	eb e6       	ldi	r30, 0x6B	; 107
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	80 68       	ori	r24, 0x80	; 128
 6b4:	80 83       	st	Z, r24
	
	sei();
 6b6:	78 94       	sei
	
	while(1){
		
		
		if (mood==1){
 6b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 6c0:	01 97       	sbiw	r24, 0x01	; 1
 6c2:	69 f4       	brne	.+26     	; 0x6de <main+0x4c>
			Convert_chanel2(0);
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e 94 c5 01 	call	0x38a	; 0x38a <Convert_chanel2>
			Convert_chanel3(0);
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 87 02 	call	0x50e	; 0x50e <Convert_chanel3>
			Convert_chanel1(1);
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 03 01 	call	0x206	; 0x206 <Convert_chanel1>
 6dc:	ed cf       	rjmp	.-38     	; 0x6b8 <main+0x26>
			
		}
		
		else if (mood==2){
 6de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 6e6:	02 97       	sbiw	r24, 0x02	; 2
 6e8:	69 f4       	brne	.+26     	; 0x704 <main+0x72>
			Convert_chanel1(0);
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 03 01 	call	0x206	; 0x206 <Convert_chanel1>
			Convert_chanel3(0);
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 87 02 	call	0x50e	; 0x50e <Convert_chanel3>
			Convert_chanel2(1);
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 c5 01 	call	0x38a	; 0x38a <Convert_chanel2>
 702:	da cf       	rjmp	.-76     	; 0x6b8 <main+0x26>
			
		}
		
		else if (mood==3){
 704:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 708:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 70c:	03 97       	sbiw	r24, 0x03	; 3
 70e:	a1 f6       	brne	.-88     	; 0x6b8 <main+0x26>
			Convert_chanel2(0);
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0e 94 c5 01 	call	0x38a	; 0x38a <Convert_chanel2>
			Convert_chanel1(0);
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 03 01 	call	0x206	; 0x206 <Convert_chanel1>
			Convert_chanel3(1);
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 87 02 	call	0x50e	; 0x50e <Convert_chanel3>
 728:	c7 cf       	rjmp	.-114    	; 0x6b8 <main+0x26>

0000072a <__vector_3>:


// rutina de interrupcion 


ISR (PCINT0_vect){
 72a:	1f 92       	push	r1
 72c:	0f 92       	push	r0
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	0f 92       	push	r0
 732:	11 24       	eor	r1, r1
 734:	8f 93       	push	r24
 736:	9f 93       	push	r25
	mood+=1;
 738:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 73c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 740:	01 96       	adiw	r24, 0x01	; 1
 742:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 746:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
	if (mood>3){
 74a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 74e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 752:	04 97       	sbiw	r24, 0x04	; 4
 754:	34 f0       	brlt	.+12     	; 0x762 <__vector_3+0x38>
		mood=1;
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 75e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
}
 762:	9f 91       	pop	r25
 764:	8f 91       	pop	r24
 766:	0f 90       	pop	r0
 768:	0f be       	out	0x3f, r0	; 63
 76a:	0f 90       	pop	r0
 76c:	1f 90       	pop	r1
 76e:	18 95       	reti

00000770 <__subsf3>:
 770:	50 58       	subi	r21, 0x80	; 128

00000772 <__addsf3>:
 772:	bb 27       	eor	r27, r27
 774:	aa 27       	eor	r26, r26
 776:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__addsf3x>
 77a:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_round>
 77e:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_pscA>
 782:	38 f0       	brcs	.+14     	; 0x792 <__addsf3+0x20>
 784:	0e 94 3c 05 	call	0xa78	; 0xa78 <__fp_pscB>
 788:	20 f0       	brcs	.+8      	; 0x792 <__addsf3+0x20>
 78a:	39 f4       	brne	.+14     	; 0x79a <__addsf3+0x28>
 78c:	9f 3f       	cpi	r25, 0xFF	; 255
 78e:	19 f4       	brne	.+6      	; 0x796 <__addsf3+0x24>
 790:	26 f4       	brtc	.+8      	; 0x79a <__addsf3+0x28>
 792:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__fp_nan>
 796:	0e f4       	brtc	.+2      	; 0x79a <__addsf3+0x28>
 798:	e0 95       	com	r30
 79a:	e7 fb       	bst	r30, 7
 79c:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__fp_inf>

000007a0 <__addsf3x>:
 7a0:	e9 2f       	mov	r30, r25
 7a2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fp_split3>
 7a6:	58 f3       	brcs	.-42     	; 0x77e <__addsf3+0xc>
 7a8:	ba 17       	cp	r27, r26
 7aa:	62 07       	cpc	r22, r18
 7ac:	73 07       	cpc	r23, r19
 7ae:	84 07       	cpc	r24, r20
 7b0:	95 07       	cpc	r25, r21
 7b2:	20 f0       	brcs	.+8      	; 0x7bc <__addsf3x+0x1c>
 7b4:	79 f4       	brne	.+30     	; 0x7d4 <__addsf3x+0x34>
 7b6:	a6 f5       	brtc	.+104    	; 0x820 <__addsf3x+0x80>
 7b8:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_zero>
 7bc:	0e f4       	brtc	.+2      	; 0x7c0 <__addsf3x+0x20>
 7be:	e0 95       	com	r30
 7c0:	0b 2e       	mov	r0, r27
 7c2:	ba 2f       	mov	r27, r26
 7c4:	a0 2d       	mov	r26, r0
 7c6:	0b 01       	movw	r0, r22
 7c8:	b9 01       	movw	r22, r18
 7ca:	90 01       	movw	r18, r0
 7cc:	0c 01       	movw	r0, r24
 7ce:	ca 01       	movw	r24, r20
 7d0:	a0 01       	movw	r20, r0
 7d2:	11 24       	eor	r1, r1
 7d4:	ff 27       	eor	r31, r31
 7d6:	59 1b       	sub	r21, r25
 7d8:	99 f0       	breq	.+38     	; 0x800 <__addsf3x+0x60>
 7da:	59 3f       	cpi	r21, 0xF9	; 249
 7dc:	50 f4       	brcc	.+20     	; 0x7f2 <__addsf3x+0x52>
 7de:	50 3e       	cpi	r21, 0xE0	; 224
 7e0:	68 f1       	brcs	.+90     	; 0x83c <__addsf3x+0x9c>
 7e2:	1a 16       	cp	r1, r26
 7e4:	f0 40       	sbci	r31, 0x00	; 0
 7e6:	a2 2f       	mov	r26, r18
 7e8:	23 2f       	mov	r18, r19
 7ea:	34 2f       	mov	r19, r20
 7ec:	44 27       	eor	r20, r20
 7ee:	58 5f       	subi	r21, 0xF8	; 248
 7f0:	f3 cf       	rjmp	.-26     	; 0x7d8 <__addsf3x+0x38>
 7f2:	46 95       	lsr	r20
 7f4:	37 95       	ror	r19
 7f6:	27 95       	ror	r18
 7f8:	a7 95       	ror	r26
 7fa:	f0 40       	sbci	r31, 0x00	; 0
 7fc:	53 95       	inc	r21
 7fe:	c9 f7       	brne	.-14     	; 0x7f2 <__addsf3x+0x52>
 800:	7e f4       	brtc	.+30     	; 0x820 <__addsf3x+0x80>
 802:	1f 16       	cp	r1, r31
 804:	ba 0b       	sbc	r27, r26
 806:	62 0b       	sbc	r22, r18
 808:	73 0b       	sbc	r23, r19
 80a:	84 0b       	sbc	r24, r20
 80c:	ba f0       	brmi	.+46     	; 0x83c <__addsf3x+0x9c>
 80e:	91 50       	subi	r25, 0x01	; 1
 810:	a1 f0       	breq	.+40     	; 0x83a <__addsf3x+0x9a>
 812:	ff 0f       	add	r31, r31
 814:	bb 1f       	adc	r27, r27
 816:	66 1f       	adc	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	c2 f7       	brpl	.-16     	; 0x80e <__addsf3x+0x6e>
 81e:	0e c0       	rjmp	.+28     	; 0x83c <__addsf3x+0x9c>
 820:	ba 0f       	add	r27, r26
 822:	62 1f       	adc	r22, r18
 824:	73 1f       	adc	r23, r19
 826:	84 1f       	adc	r24, r20
 828:	48 f4       	brcc	.+18     	; 0x83c <__addsf3x+0x9c>
 82a:	87 95       	ror	r24
 82c:	77 95       	ror	r23
 82e:	67 95       	ror	r22
 830:	b7 95       	ror	r27
 832:	f7 95       	ror	r31
 834:	9e 3f       	cpi	r25, 0xFE	; 254
 836:	08 f0       	brcs	.+2      	; 0x83a <__addsf3x+0x9a>
 838:	b0 cf       	rjmp	.-160    	; 0x79a <__addsf3+0x28>
 83a:	93 95       	inc	r25
 83c:	88 0f       	add	r24, r24
 83e:	08 f0       	brcs	.+2      	; 0x842 <__addsf3x+0xa2>
 840:	99 27       	eor	r25, r25
 842:	ee 0f       	add	r30, r30
 844:	97 95       	ror	r25
 846:	87 95       	ror	r24
 848:	08 95       	ret

0000084a <__cmpsf2>:
 84a:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_cmp>
 84e:	08 f4       	brcc	.+2      	; 0x852 <__cmpsf2+0x8>
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	08 95       	ret

00000854 <__divsf3>:
 854:	0e 94 3e 04 	call	0x87c	; 0x87c <__divsf3x>
 858:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_round>
 85c:	0e 94 3c 05 	call	0xa78	; 0xa78 <__fp_pscB>
 860:	58 f0       	brcs	.+22     	; 0x878 <__divsf3+0x24>
 862:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_pscA>
 866:	40 f0       	brcs	.+16     	; 0x878 <__divsf3+0x24>
 868:	29 f4       	brne	.+10     	; 0x874 <__divsf3+0x20>
 86a:	5f 3f       	cpi	r21, 0xFF	; 255
 86c:	29 f0       	breq	.+10     	; 0x878 <__divsf3+0x24>
 86e:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__fp_inf>
 872:	51 11       	cpse	r21, r1
 874:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_szero>
 878:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__fp_nan>

0000087c <__divsf3x>:
 87c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fp_split3>
 880:	68 f3       	brcs	.-38     	; 0x85c <__divsf3+0x8>

00000882 <__divsf3_pse>:
 882:	99 23       	and	r25, r25
 884:	b1 f3       	breq	.-20     	; 0x872 <__divsf3+0x1e>
 886:	55 23       	and	r21, r21
 888:	91 f3       	breq	.-28     	; 0x86e <__divsf3+0x1a>
 88a:	95 1b       	sub	r25, r21
 88c:	55 0b       	sbc	r21, r21
 88e:	bb 27       	eor	r27, r27
 890:	aa 27       	eor	r26, r26
 892:	62 17       	cp	r22, r18
 894:	73 07       	cpc	r23, r19
 896:	84 07       	cpc	r24, r20
 898:	38 f0       	brcs	.+14     	; 0x8a8 <__divsf3_pse+0x26>
 89a:	9f 5f       	subi	r25, 0xFF	; 255
 89c:	5f 4f       	sbci	r21, 0xFF	; 255
 89e:	22 0f       	add	r18, r18
 8a0:	33 1f       	adc	r19, r19
 8a2:	44 1f       	adc	r20, r20
 8a4:	aa 1f       	adc	r26, r26
 8a6:	a9 f3       	breq	.-22     	; 0x892 <__divsf3_pse+0x10>
 8a8:	35 d0       	rcall	.+106    	; 0x914 <__stack+0x15>
 8aa:	0e 2e       	mov	r0, r30
 8ac:	3a f0       	brmi	.+14     	; 0x8bc <__divsf3_pse+0x3a>
 8ae:	e0 e8       	ldi	r30, 0x80	; 128
 8b0:	32 d0       	rcall	.+100    	; 0x916 <__stack+0x17>
 8b2:	91 50       	subi	r25, 0x01	; 1
 8b4:	50 40       	sbci	r21, 0x00	; 0
 8b6:	e6 95       	lsr	r30
 8b8:	00 1c       	adc	r0, r0
 8ba:	ca f7       	brpl	.-14     	; 0x8ae <__divsf3_pse+0x2c>
 8bc:	2b d0       	rcall	.+86     	; 0x914 <__stack+0x15>
 8be:	fe 2f       	mov	r31, r30
 8c0:	29 d0       	rcall	.+82     	; 0x914 <__stack+0x15>
 8c2:	66 0f       	add	r22, r22
 8c4:	77 1f       	adc	r23, r23
 8c6:	88 1f       	adc	r24, r24
 8c8:	bb 1f       	adc	r27, r27
 8ca:	26 17       	cp	r18, r22
 8cc:	37 07       	cpc	r19, r23
 8ce:	48 07       	cpc	r20, r24
 8d0:	ab 07       	cpc	r26, r27
 8d2:	b0 e8       	ldi	r27, 0x80	; 128
 8d4:	09 f0       	breq	.+2      	; 0x8d8 <__divsf3_pse+0x56>
 8d6:	bb 0b       	sbc	r27, r27
 8d8:	80 2d       	mov	r24, r0
 8da:	bf 01       	movw	r22, r30
 8dc:	ff 27       	eor	r31, r31
 8de:	93 58       	subi	r25, 0x83	; 131
 8e0:	5f 4f       	sbci	r21, 0xFF	; 255
 8e2:	3a f0       	brmi	.+14     	; 0x8f2 <__divsf3_pse+0x70>
 8e4:	9e 3f       	cpi	r25, 0xFE	; 254
 8e6:	51 05       	cpc	r21, r1
 8e8:	78 f0       	brcs	.+30     	; 0x908 <__stack+0x9>
 8ea:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__fp_inf>
 8ee:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_szero>
 8f2:	5f 3f       	cpi	r21, 0xFF	; 255
 8f4:	e4 f3       	brlt	.-8      	; 0x8ee <__divsf3_pse+0x6c>
 8f6:	98 3e       	cpi	r25, 0xE8	; 232
 8f8:	d4 f3       	brlt	.-12     	; 0x8ee <__divsf3_pse+0x6c>
 8fa:	86 95       	lsr	r24
 8fc:	77 95       	ror	r23
 8fe:	67 95       	ror	r22
 900:	b7 95       	ror	r27
 902:	f7 95       	ror	r31
 904:	9f 5f       	subi	r25, 0xFF	; 255
 906:	c9 f7       	brne	.-14     	; 0x8fa <__divsf3_pse+0x78>
 908:	88 0f       	add	r24, r24
 90a:	91 1d       	adc	r25, r1
 90c:	96 95       	lsr	r25
 90e:	87 95       	ror	r24
 910:	97 f9       	bld	r25, 7
 912:	08 95       	ret
 914:	e1 e0       	ldi	r30, 0x01	; 1
 916:	66 0f       	add	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	88 1f       	adc	r24, r24
 91c:	bb 1f       	adc	r27, r27
 91e:	62 17       	cp	r22, r18
 920:	73 07       	cpc	r23, r19
 922:	84 07       	cpc	r24, r20
 924:	ba 07       	cpc	r27, r26
 926:	20 f0       	brcs	.+8      	; 0x930 <__stack+0x31>
 928:	62 1b       	sub	r22, r18
 92a:	73 0b       	sbc	r23, r19
 92c:	84 0b       	sbc	r24, r20
 92e:	ba 0b       	sbc	r27, r26
 930:	ee 1f       	adc	r30, r30
 932:	88 f7       	brcc	.-30     	; 0x916 <__stack+0x17>
 934:	e0 95       	com	r30
 936:	08 95       	ret

00000938 <__fixunssfsi>:
 938:	0e 94 5c 05 	call	0xab8	; 0xab8 <__fp_splitA>
 93c:	88 f0       	brcs	.+34     	; 0x960 <__fixunssfsi+0x28>
 93e:	9f 57       	subi	r25, 0x7F	; 127
 940:	98 f0       	brcs	.+38     	; 0x968 <__fixunssfsi+0x30>
 942:	b9 2f       	mov	r27, r25
 944:	99 27       	eor	r25, r25
 946:	b7 51       	subi	r27, 0x17	; 23
 948:	b0 f0       	brcs	.+44     	; 0x976 <__fixunssfsi+0x3e>
 94a:	e1 f0       	breq	.+56     	; 0x984 <__fixunssfsi+0x4c>
 94c:	66 0f       	add	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	88 1f       	adc	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	1a f0       	brmi	.+6      	; 0x95c <__fixunssfsi+0x24>
 956:	ba 95       	dec	r27
 958:	c9 f7       	brne	.-14     	; 0x94c <__fixunssfsi+0x14>
 95a:	14 c0       	rjmp	.+40     	; 0x984 <__fixunssfsi+0x4c>
 95c:	b1 30       	cpi	r27, 0x01	; 1
 95e:	91 f0       	breq	.+36     	; 0x984 <__fixunssfsi+0x4c>
 960:	0e 94 76 05 	call	0xaec	; 0xaec <__fp_zero>
 964:	b1 e0       	ldi	r27, 0x01	; 1
 966:	08 95       	ret
 968:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_zero>
 96c:	67 2f       	mov	r22, r23
 96e:	78 2f       	mov	r23, r24
 970:	88 27       	eor	r24, r24
 972:	b8 5f       	subi	r27, 0xF8	; 248
 974:	39 f0       	breq	.+14     	; 0x984 <__fixunssfsi+0x4c>
 976:	b9 3f       	cpi	r27, 0xF9	; 249
 978:	cc f3       	brlt	.-14     	; 0x96c <__fixunssfsi+0x34>
 97a:	86 95       	lsr	r24
 97c:	77 95       	ror	r23
 97e:	67 95       	ror	r22
 980:	b3 95       	inc	r27
 982:	d9 f7       	brne	.-10     	; 0x97a <__fixunssfsi+0x42>
 984:	3e f4       	brtc	.+14     	; 0x994 <__fixunssfsi+0x5c>
 986:	90 95       	com	r25
 988:	80 95       	com	r24
 98a:	70 95       	com	r23
 98c:	61 95       	neg	r22
 98e:	7f 4f       	sbci	r23, 0xFF	; 255
 990:	8f 4f       	sbci	r24, 0xFF	; 255
 992:	9f 4f       	sbci	r25, 0xFF	; 255
 994:	08 95       	ret

00000996 <__floatunsisf>:
 996:	e8 94       	clt
 998:	09 c0       	rjmp	.+18     	; 0x9ac <__floatsisf+0x12>

0000099a <__floatsisf>:
 99a:	97 fb       	bst	r25, 7
 99c:	3e f4       	brtc	.+14     	; 0x9ac <__floatsisf+0x12>
 99e:	90 95       	com	r25
 9a0:	80 95       	com	r24
 9a2:	70 95       	com	r23
 9a4:	61 95       	neg	r22
 9a6:	7f 4f       	sbci	r23, 0xFF	; 255
 9a8:	8f 4f       	sbci	r24, 0xFF	; 255
 9aa:	9f 4f       	sbci	r25, 0xFF	; 255
 9ac:	99 23       	and	r25, r25
 9ae:	a9 f0       	breq	.+42     	; 0x9da <__floatsisf+0x40>
 9b0:	f9 2f       	mov	r31, r25
 9b2:	96 e9       	ldi	r25, 0x96	; 150
 9b4:	bb 27       	eor	r27, r27
 9b6:	93 95       	inc	r25
 9b8:	f6 95       	lsr	r31
 9ba:	87 95       	ror	r24
 9bc:	77 95       	ror	r23
 9be:	67 95       	ror	r22
 9c0:	b7 95       	ror	r27
 9c2:	f1 11       	cpse	r31, r1
 9c4:	f8 cf       	rjmp	.-16     	; 0x9b6 <__floatsisf+0x1c>
 9c6:	fa f4       	brpl	.+62     	; 0xa06 <__floatsisf+0x6c>
 9c8:	bb 0f       	add	r27, r27
 9ca:	11 f4       	brne	.+4      	; 0x9d0 <__floatsisf+0x36>
 9cc:	60 ff       	sbrs	r22, 0
 9ce:	1b c0       	rjmp	.+54     	; 0xa06 <__floatsisf+0x6c>
 9d0:	6f 5f       	subi	r22, 0xFF	; 255
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	8f 4f       	sbci	r24, 0xFF	; 255
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	16 c0       	rjmp	.+44     	; 0xa06 <__floatsisf+0x6c>
 9da:	88 23       	and	r24, r24
 9dc:	11 f0       	breq	.+4      	; 0x9e2 <__floatsisf+0x48>
 9de:	96 e9       	ldi	r25, 0x96	; 150
 9e0:	11 c0       	rjmp	.+34     	; 0xa04 <__floatsisf+0x6a>
 9e2:	77 23       	and	r23, r23
 9e4:	21 f0       	breq	.+8      	; 0x9ee <__floatsisf+0x54>
 9e6:	9e e8       	ldi	r25, 0x8E	; 142
 9e8:	87 2f       	mov	r24, r23
 9ea:	76 2f       	mov	r23, r22
 9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <__floatsisf+0x5e>
 9ee:	66 23       	and	r22, r22
 9f0:	71 f0       	breq	.+28     	; 0xa0e <__floatsisf+0x74>
 9f2:	96 e8       	ldi	r25, 0x86	; 134
 9f4:	86 2f       	mov	r24, r22
 9f6:	70 e0       	ldi	r23, 0x00	; 0
 9f8:	60 e0       	ldi	r22, 0x00	; 0
 9fa:	2a f0       	brmi	.+10     	; 0xa06 <__floatsisf+0x6c>
 9fc:	9a 95       	dec	r25
 9fe:	66 0f       	add	r22, r22
 a00:	77 1f       	adc	r23, r23
 a02:	88 1f       	adc	r24, r24
 a04:	da f7       	brpl	.-10     	; 0x9fc <__floatsisf+0x62>
 a06:	88 0f       	add	r24, r24
 a08:	96 95       	lsr	r25
 a0a:	87 95       	ror	r24
 a0c:	97 f9       	bld	r25, 7
 a0e:	08 95       	ret

00000a10 <__fp_cmp>:
 a10:	99 0f       	add	r25, r25
 a12:	00 08       	sbc	r0, r0
 a14:	55 0f       	add	r21, r21
 a16:	aa 0b       	sbc	r26, r26
 a18:	e0 e8       	ldi	r30, 0x80	; 128
 a1a:	fe ef       	ldi	r31, 0xFE	; 254
 a1c:	16 16       	cp	r1, r22
 a1e:	17 06       	cpc	r1, r23
 a20:	e8 07       	cpc	r30, r24
 a22:	f9 07       	cpc	r31, r25
 a24:	c0 f0       	brcs	.+48     	; 0xa56 <__fp_cmp+0x46>
 a26:	12 16       	cp	r1, r18
 a28:	13 06       	cpc	r1, r19
 a2a:	e4 07       	cpc	r30, r20
 a2c:	f5 07       	cpc	r31, r21
 a2e:	98 f0       	brcs	.+38     	; 0xa56 <__fp_cmp+0x46>
 a30:	62 1b       	sub	r22, r18
 a32:	73 0b       	sbc	r23, r19
 a34:	84 0b       	sbc	r24, r20
 a36:	95 0b       	sbc	r25, r21
 a38:	39 f4       	brne	.+14     	; 0xa48 <__fp_cmp+0x38>
 a3a:	0a 26       	eor	r0, r26
 a3c:	61 f0       	breq	.+24     	; 0xa56 <__fp_cmp+0x46>
 a3e:	23 2b       	or	r18, r19
 a40:	24 2b       	or	r18, r20
 a42:	25 2b       	or	r18, r21
 a44:	21 f4       	brne	.+8      	; 0xa4e <__fp_cmp+0x3e>
 a46:	08 95       	ret
 a48:	0a 26       	eor	r0, r26
 a4a:	09 f4       	brne	.+2      	; 0xa4e <__fp_cmp+0x3e>
 a4c:	a1 40       	sbci	r26, 0x01	; 1
 a4e:	a6 95       	lsr	r26
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	81 1d       	adc	r24, r1
 a54:	81 1d       	adc	r24, r1
 a56:	08 95       	ret

00000a58 <__fp_inf>:
 a58:	97 f9       	bld	r25, 7
 a5a:	9f 67       	ori	r25, 0x7F	; 127
 a5c:	80 e8       	ldi	r24, 0x80	; 128
 a5e:	70 e0       	ldi	r23, 0x00	; 0
 a60:	60 e0       	ldi	r22, 0x00	; 0
 a62:	08 95       	ret

00000a64 <__fp_nan>:
 a64:	9f ef       	ldi	r25, 0xFF	; 255
 a66:	80 ec       	ldi	r24, 0xC0	; 192
 a68:	08 95       	ret

00000a6a <__fp_pscA>:
 a6a:	00 24       	eor	r0, r0
 a6c:	0a 94       	dec	r0
 a6e:	16 16       	cp	r1, r22
 a70:	17 06       	cpc	r1, r23
 a72:	18 06       	cpc	r1, r24
 a74:	09 06       	cpc	r0, r25
 a76:	08 95       	ret

00000a78 <__fp_pscB>:
 a78:	00 24       	eor	r0, r0
 a7a:	0a 94       	dec	r0
 a7c:	12 16       	cp	r1, r18
 a7e:	13 06       	cpc	r1, r19
 a80:	14 06       	cpc	r1, r20
 a82:	05 06       	cpc	r0, r21
 a84:	08 95       	ret

00000a86 <__fp_round>:
 a86:	09 2e       	mov	r0, r25
 a88:	03 94       	inc	r0
 a8a:	00 0c       	add	r0, r0
 a8c:	11 f4       	brne	.+4      	; 0xa92 <__fp_round+0xc>
 a8e:	88 23       	and	r24, r24
 a90:	52 f0       	brmi	.+20     	; 0xaa6 <__fp_round+0x20>
 a92:	bb 0f       	add	r27, r27
 a94:	40 f4       	brcc	.+16     	; 0xaa6 <__fp_round+0x20>
 a96:	bf 2b       	or	r27, r31
 a98:	11 f4       	brne	.+4      	; 0xa9e <__fp_round+0x18>
 a9a:	60 ff       	sbrs	r22, 0
 a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <__fp_round+0x20>
 a9e:	6f 5f       	subi	r22, 0xFF	; 255
 aa0:	7f 4f       	sbci	r23, 0xFF	; 255
 aa2:	8f 4f       	sbci	r24, 0xFF	; 255
 aa4:	9f 4f       	sbci	r25, 0xFF	; 255
 aa6:	08 95       	ret

00000aa8 <__fp_split3>:
 aa8:	57 fd       	sbrc	r21, 7
 aaa:	90 58       	subi	r25, 0x80	; 128
 aac:	44 0f       	add	r20, r20
 aae:	55 1f       	adc	r21, r21
 ab0:	59 f0       	breq	.+22     	; 0xac8 <__fp_splitA+0x10>
 ab2:	5f 3f       	cpi	r21, 0xFF	; 255
 ab4:	71 f0       	breq	.+28     	; 0xad2 <__fp_splitA+0x1a>
 ab6:	47 95       	ror	r20

00000ab8 <__fp_splitA>:
 ab8:	88 0f       	add	r24, r24
 aba:	97 fb       	bst	r25, 7
 abc:	99 1f       	adc	r25, r25
 abe:	61 f0       	breq	.+24     	; 0xad8 <__fp_splitA+0x20>
 ac0:	9f 3f       	cpi	r25, 0xFF	; 255
 ac2:	79 f0       	breq	.+30     	; 0xae2 <__fp_splitA+0x2a>
 ac4:	87 95       	ror	r24
 ac6:	08 95       	ret
 ac8:	12 16       	cp	r1, r18
 aca:	13 06       	cpc	r1, r19
 acc:	14 06       	cpc	r1, r20
 ace:	55 1f       	adc	r21, r21
 ad0:	f2 cf       	rjmp	.-28     	; 0xab6 <__fp_split3+0xe>
 ad2:	46 95       	lsr	r20
 ad4:	f1 df       	rcall	.-30     	; 0xab8 <__fp_splitA>
 ad6:	08 c0       	rjmp	.+16     	; 0xae8 <__fp_splitA+0x30>
 ad8:	16 16       	cp	r1, r22
 ada:	17 06       	cpc	r1, r23
 adc:	18 06       	cpc	r1, r24
 ade:	99 1f       	adc	r25, r25
 ae0:	f1 cf       	rjmp	.-30     	; 0xac4 <__fp_splitA+0xc>
 ae2:	86 95       	lsr	r24
 ae4:	71 05       	cpc	r23, r1
 ae6:	61 05       	cpc	r22, r1
 ae8:	08 94       	sec
 aea:	08 95       	ret

00000aec <__fp_zero>:
 aec:	e8 94       	clt

00000aee <__fp_szero>:
 aee:	bb 27       	eor	r27, r27
 af0:	66 27       	eor	r22, r22
 af2:	77 27       	eor	r23, r23
 af4:	cb 01       	movw	r24, r22
 af6:	97 f9       	bld	r25, 7
 af8:	08 95       	ret

00000afa <__gesf2>:
 afa:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_cmp>
 afe:	08 f4       	brcc	.+2      	; 0xb02 <__gesf2+0x8>
 b00:	8f ef       	ldi	r24, 0xFF	; 255
 b02:	08 95       	ret

00000b04 <__mulsf3>:
 b04:	0e 94 95 05 	call	0xb2a	; 0xb2a <__mulsf3x>
 b08:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_round>
 b0c:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_pscA>
 b10:	38 f0       	brcs	.+14     	; 0xb20 <__mulsf3+0x1c>
 b12:	0e 94 3c 05 	call	0xa78	; 0xa78 <__fp_pscB>
 b16:	20 f0       	brcs	.+8      	; 0xb20 <__mulsf3+0x1c>
 b18:	95 23       	and	r25, r21
 b1a:	11 f0       	breq	.+4      	; 0xb20 <__mulsf3+0x1c>
 b1c:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__fp_inf>
 b20:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__fp_nan>
 b24:	11 24       	eor	r1, r1
 b26:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_szero>

00000b2a <__mulsf3x>:
 b2a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fp_split3>
 b2e:	70 f3       	brcs	.-36     	; 0xb0c <__mulsf3+0x8>

00000b30 <__mulsf3_pse>:
 b30:	95 9f       	mul	r25, r21
 b32:	c1 f3       	breq	.-16     	; 0xb24 <__mulsf3+0x20>
 b34:	95 0f       	add	r25, r21
 b36:	50 e0       	ldi	r21, 0x00	; 0
 b38:	55 1f       	adc	r21, r21
 b3a:	62 9f       	mul	r22, r18
 b3c:	f0 01       	movw	r30, r0
 b3e:	72 9f       	mul	r23, r18
 b40:	bb 27       	eor	r27, r27
 b42:	f0 0d       	add	r31, r0
 b44:	b1 1d       	adc	r27, r1
 b46:	63 9f       	mul	r22, r19
 b48:	aa 27       	eor	r26, r26
 b4a:	f0 0d       	add	r31, r0
 b4c:	b1 1d       	adc	r27, r1
 b4e:	aa 1f       	adc	r26, r26
 b50:	64 9f       	mul	r22, r20
 b52:	66 27       	eor	r22, r22
 b54:	b0 0d       	add	r27, r0
 b56:	a1 1d       	adc	r26, r1
 b58:	66 1f       	adc	r22, r22
 b5a:	82 9f       	mul	r24, r18
 b5c:	22 27       	eor	r18, r18
 b5e:	b0 0d       	add	r27, r0
 b60:	a1 1d       	adc	r26, r1
 b62:	62 1f       	adc	r22, r18
 b64:	73 9f       	mul	r23, r19
 b66:	b0 0d       	add	r27, r0
 b68:	a1 1d       	adc	r26, r1
 b6a:	62 1f       	adc	r22, r18
 b6c:	83 9f       	mul	r24, r19
 b6e:	a0 0d       	add	r26, r0
 b70:	61 1d       	adc	r22, r1
 b72:	22 1f       	adc	r18, r18
 b74:	74 9f       	mul	r23, r20
 b76:	33 27       	eor	r19, r19
 b78:	a0 0d       	add	r26, r0
 b7a:	61 1d       	adc	r22, r1
 b7c:	23 1f       	adc	r18, r19
 b7e:	84 9f       	mul	r24, r20
 b80:	60 0d       	add	r22, r0
 b82:	21 1d       	adc	r18, r1
 b84:	82 2f       	mov	r24, r18
 b86:	76 2f       	mov	r23, r22
 b88:	6a 2f       	mov	r22, r26
 b8a:	11 24       	eor	r1, r1
 b8c:	9f 57       	subi	r25, 0x7F	; 127
 b8e:	50 40       	sbci	r21, 0x00	; 0
 b90:	9a f0       	brmi	.+38     	; 0xbb8 <__mulsf3_pse+0x88>
 b92:	f1 f0       	breq	.+60     	; 0xbd0 <__mulsf3_pse+0xa0>
 b94:	88 23       	and	r24, r24
 b96:	4a f0       	brmi	.+18     	; 0xbaa <__mulsf3_pse+0x7a>
 b98:	ee 0f       	add	r30, r30
 b9a:	ff 1f       	adc	r31, r31
 b9c:	bb 1f       	adc	r27, r27
 b9e:	66 1f       	adc	r22, r22
 ba0:	77 1f       	adc	r23, r23
 ba2:	88 1f       	adc	r24, r24
 ba4:	91 50       	subi	r25, 0x01	; 1
 ba6:	50 40       	sbci	r21, 0x00	; 0
 ba8:	a9 f7       	brne	.-22     	; 0xb94 <__mulsf3_pse+0x64>
 baa:	9e 3f       	cpi	r25, 0xFE	; 254
 bac:	51 05       	cpc	r21, r1
 bae:	80 f0       	brcs	.+32     	; 0xbd0 <__mulsf3_pse+0xa0>
 bb0:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__fp_inf>
 bb4:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_szero>
 bb8:	5f 3f       	cpi	r21, 0xFF	; 255
 bba:	e4 f3       	brlt	.-8      	; 0xbb4 <__mulsf3_pse+0x84>
 bbc:	98 3e       	cpi	r25, 0xE8	; 232
 bbe:	d4 f3       	brlt	.-12     	; 0xbb4 <__mulsf3_pse+0x84>
 bc0:	86 95       	lsr	r24
 bc2:	77 95       	ror	r23
 bc4:	67 95       	ror	r22
 bc6:	b7 95       	ror	r27
 bc8:	f7 95       	ror	r31
 bca:	e7 95       	ror	r30
 bcc:	9f 5f       	subi	r25, 0xFF	; 255
 bce:	c1 f7       	brne	.-16     	; 0xbc0 <__mulsf3_pse+0x90>
 bd0:	fe 2b       	or	r31, r30
 bd2:	88 0f       	add	r24, r24
 bd4:	91 1d       	adc	r25, r1
 bd6:	96 95       	lsr	r25
 bd8:	87 95       	ror	r24
 bda:	97 f9       	bld	r25, 7
 bdc:	08 95       	ret

00000bde <_exit>:
 bde:	f8 94       	cli

00000be0 <__stop_program>:
 be0:	ff cf       	rjmp	.-2      	; 0xbe0 <__stop_program>
