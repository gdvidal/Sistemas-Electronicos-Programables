
lab4_task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000144  00800100  000002d4  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000994  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b6  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000464  00000000  00000000  00001696  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001afc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047d  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000170  00000000  00000000  0000200d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000217d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ed       	ldi	r30, 0xD4	; 212
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include "USART/USART_implementacion.h"


int main(void)

{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	64 97       	sbiw	r28, 0x14	; 20
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	//declaramos el struct 
												    //baud, size, parity, stop
	struct USART_configuration config_57600_8N1 = {57600,8,0,1};
  aa:	85 e0       	ldi	r24, 0x05	; 5
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	struct USART_configuration config_9600_8N2 = {9600,8,0,2};
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	e5 e0       	ldi	r30, 0x05	; 5
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	de 01       	movw	r26, r28
  c4:	16 96       	adiw	r26, 0x06	; 6
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	8a 95       	dec	r24
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x30>
	struct USART_configuration config_19200_7N1 = {19200,7,0,1};
  ce:	85 e0       	ldi	r24, 0x05	; 5
  d0:	ea e0       	ldi	r30, 0x0A	; 10
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	de 01       	movw	r26, r28
  d6:	1b 96       	adiw	r26, 0x0b	; 11
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	8a 95       	dec	r24
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x42>
	struct USART_configuration config_19200_7E2 = {19200,7,2,2};
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	ef e0       	ldi	r30, 0x0F	; 15
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	de 01       	movw	r26, r28
  e8:	50 96       	adiw	r26, 0x10	; 16
  ea:	01 90       	ld	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	8a 95       	dec	r24
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x54>
	
	// Initialise the serial communication interface and print a test string
	USART_Init(config_57600_8N1);
  f2:	49 81       	ldd	r20, Y+1	; 0x01
  f4:	5a 81       	ldd	r21, Y+2	; 0x02
  f6:	6b 81       	ldd	r22, Y+3	; 0x03
  f8:	7c 81       	ldd	r23, Y+4	; 0x04
  fa:	8d 81       	ldd	r24, Y+5	; 0x05
  fc:	0e 94 a6 00 	call	0x14c	; 0x14c <USART_Init>
	USART_Transmit_String("Congratulations! You are now sending test messages at 57600 8N1.\r\n");
 100:	84 e1       	ldi	r24, 0x14	; 20
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 37 01 	call	0x26e	; 0x26e <USART_Transmit_String>

	// Initialise the serial communication interface and print a test string
	USART_Init(config_9600_8N2);
 108:	4e 81       	ldd	r20, Y+6	; 0x06
 10a:	5f 81       	ldd	r21, Y+7	; 0x07
 10c:	68 85       	ldd	r22, Y+8	; 0x08
 10e:	79 85       	ldd	r23, Y+9	; 0x09
 110:	8a 85       	ldd	r24, Y+10	; 0x0a
 112:	0e 94 a6 00 	call	0x14c	; 0x14c <USART_Init>
	USART_Transmit_String("Change your terminal settings and reset the MCU to see 9600 8N2\r\n");
 116:	87 e5       	ldi	r24, 0x57	; 87
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 37 01 	call	0x26e	; 0x26e <USART_Transmit_String>

	// Initialise the serial communication interface and print a test string
	USART_Init(config_19200_7N1);
 11e:	4b 85       	ldd	r20, Y+11	; 0x0b
 120:	5c 85       	ldd	r21, Y+12	; 0x0c
 122:	6d 85       	ldd	r22, Y+13	; 0x0d
 124:	7e 85       	ldd	r23, Y+14	; 0x0e
 126:	8f 85       	ldd	r24, Y+15	; 0x0f
 128:	0e 94 a6 00 	call	0x14c	; 0x14c <USART_Init>
	USART_Transmit_String("With the wrong settings, you will see nothing but gibberish at 19200 7N1\r\n");
 12c:	89 e9       	ldi	r24, 0x99	; 153
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 37 01 	call	0x26e	; 0x26e <USART_Transmit_String>

	// Initialise the serial communication interface and print a test string
	USART_Init(config_19200_7E2);
 134:	48 89       	ldd	r20, Y+16	; 0x10
 136:	59 89       	ldd	r21, Y+17	; 0x11
 138:	6a 89       	ldd	r22, Y+18	; 0x12
 13a:	7b 89       	ldd	r23, Y+19	; 0x13
 13c:	8c 89       	ldd	r24, Y+20	; 0x14
 13e:	0e 94 a6 00 	call	0x14c	; 0x14c <USART_Init>
	USART_Transmit_String("Even parity and two stop bits have limited use. But 19200 7E2 is great for annoying students\r\n");
 142:	84 ee       	ldi	r24, 0xE4	; 228
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 37 01 	call	0x26e	; 0x26e <USART_Transmit_String>
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0xb4>

0000014c <USART_Init>:

#include "USART_implementacion.h"


uint8_t USART_Init(struct USART_configuration config)
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	00 d0       	rcall	.+0      	; 0x152 <USART_Init+0x6>
 152:	00 d0       	rcall	.+0      	; 0x154 <USART_Init+0x8>
 154:	1f 92       	push	r1
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	49 83       	std	Y+1, r20	; 0x01
 15c:	5a 83       	std	Y+2, r21	; 0x02
 15e:	6b 83       	std	Y+3, r22	; 0x03
 160:	7c 83       	std	Y+4, r23	; 0x04
 162:	8d 83       	std	Y+5, r24	; 0x05
	//usart como uart
	UCSR0C &=~ (1<<UMSEL00);
 164:	e2 ec       	ldi	r30, 0xC2	; 194
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	8f 7b       	andi	r24, 0xBF	; 191
 16c:	80 83       	st	Z, r24
	UCSR0C &=~ (1<<UMSEL01);
 16e:	80 81       	ld	r24, Z
 170:	8f 77       	andi	r24, 0x7F	; 127
 172:	80 83       	st	Z, r24
	
	
	//Velocidad de la comunicacion
	
	uint16_t ubrr=F_CPU/16/config.baud-1;
 174:	29 81       	ldd	r18, Y+1	; 0x01
 176:	3a 81       	ldd	r19, Y+2	; 0x02
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	60 e4       	ldi	r22, 0x40	; 64
 17e:	72 e4       	ldi	r23, 0x42	; 66
 180:	8f e0       	ldi	r24, 0x0F	; 15
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 46 01 	call	0x28c	; 0x28c <__udivmodsi4>
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	31 09       	sbc	r19, r1
	
	UBRR0H = (unsigned char)(ubrr>>8);
 18c:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 190:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	//size//
	switch(config.size)
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	86 30       	cpi	r24, 0x06	; 6
 198:	79 f0       	breq	.+30     	; 0x1b8 <USART_Init+0x6c>
 19a:	18 f4       	brcc	.+6      	; 0x1a2 <USART_Init+0x56>
 19c:	85 30       	cpi	r24, 0x05	; 5
 19e:	31 f0       	breq	.+12     	; 0x1ac <USART_Init+0x60>
 1a0:	1c c0       	rjmp	.+56     	; 0x1da <USART_Init+0x8e>
 1a2:	87 30       	cpi	r24, 0x07	; 7
 1a4:	79 f0       	breq	.+30     	; 0x1c4 <USART_Init+0x78>
 1a6:	88 30       	cpi	r24, 0x08	; 8
 1a8:	99 f0       	breq	.+38     	; 0x1d0 <USART_Init+0x84>
 1aa:	17 c0       	rjmp	.+46     	; 0x1da <USART_Init+0x8e>
	{
		case 5:
		UCSR0C &= ~((1 << UCSZ01) | (1 << UCSZ00));
 1ac:	e2 ec       	ldi	r30, 0xC2	; 194
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	89 7f       	andi	r24, 0xF9	; 249
 1b4:	80 83       	st	Z, r24
		break;
 1b6:	11 c0       	rjmp	.+34     	; 0x1da <USART_Init+0x8e>
		
		case 6:
		UCSR0C |= (1 << UCSZ00);
 1b8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	80 83       	st	Z, r24
		break;
 1c2:	0b c0       	rjmp	.+22     	; 0x1da <USART_Init+0x8e>
		
		case 7:
		UCSR0C |= (1 << UCSZ01);
 1c4:	e2 ec       	ldi	r30, 0xC2	; 194
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	80 83       	st	Z, r24
		break;
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <USART_Init+0x8e>
		
		case 8:
		UCSR0C |= ((1 << UCSZ01) | (1 << UCSZ00));
 1d0:	e2 ec       	ldi	r30, 0xC2	; 194
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	86 60       	ori	r24, 0x06	; 6
 1d8:	80 83       	st	Z, r24
		break;
	}
	
	// Parity //
	switch(config.parity) {
 1da:	8c 81       	ldd	r24, Y+4	; 0x04
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	51 f0       	breq	.+20     	; 0x1f4 <USART_Init+0xa8>
 1e0:	18 f0       	brcs	.+6      	; 0x1e8 <USART_Init+0x9c>
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	69 f0       	breq	.+26     	; 0x200 <USART_Init+0xb4>
 1e6:	11 c0       	rjmp	.+34     	; 0x20a <USART_Init+0xbe>
		case 0: // No parity
		UCSR0C &= ~((1 << UPM00) | (1 << UPM01));
 1e8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	8f 7c       	andi	r24, 0xCF	; 207
 1f0:	80 83       	st	Z, r24
		break;
 1f2:	0b c0       	rjmp	.+22     	; 0x20a <USART_Init+0xbe>
		case 1: // Odd parity
		UCSR0C |= ((1 << UPM01) | (1 << UPM00));
 1f4:	e2 ec       	ldi	r30, 0xC2	; 194
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	80 63       	ori	r24, 0x30	; 48
 1fc:	80 83       	st	Z, r24
		break;
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <USART_Init+0xbe>
		case 2: // Even parity
		UCSR0C |= (1 << UPM01);
 200:	e2 ec       	ldi	r30, 0xC2	; 194
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	80 62       	ori	r24, 0x20	; 32
 208:	80 83       	st	Z, r24
		break;
	}
	
	//stop//
	switch(config.stop) {
 20a:	8d 81       	ldd	r24, Y+5	; 0x05
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	19 f0       	breq	.+6      	; 0x216 <USART_Init+0xca>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	39 f0       	breq	.+14     	; 0x222 <USART_Init+0xd6>
 214:	0b c0       	rjmp	.+22     	; 0x22c <USART_Init+0xe0>
		case 1:
		UCSR0C &= ~(1 << USBS0); //unico bit de stop
 216:	e2 ec       	ldi	r30, 0xC2	; 194
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	87 7f       	andi	r24, 0xF7	; 247
 21e:	80 83       	st	Z, r24
		break;
 220:	05 c0       	rjmp	.+10     	; 0x22c <USART_Init+0xe0>
		case 2:
		UCSR0C |= (1 << USBS0); //2 bits de stop
 222:	e2 ec       	ldi	r30, 0xC2	; 194
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	88 60       	ori	r24, 0x08	; 8
 22a:	80 83       	st	Z, r24
		break;
	}
	
	// Transmit Enable: pin TX//
	UCSR0B |= (1<<TXEN0);
 22c:	e1 ec       	ldi	r30, 0xC1	; 193
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	88 60       	ori	r24, 0x08	; 8
 234:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0);
 236:	80 81       	ld	r24, Z
 238:	80 61       	ori	r24, 0x10	; 16
 23a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	81 ee       	ldi	r24, 0xE1	; 225
 240:	94 e0       	ldi	r25, 0x04	; 4
 242:	21 50       	subi	r18, 0x01	; 1
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <USART_Init+0xf6>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <USART_Init+0x100>
 24c:	00 00       	nop
	_delay_ms(100);
}
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <USART_Transmit_Char>:


void USART_Transmit_Char(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0))); //minetras no reciba un dato
 25e:	e0 ec       	ldi	r30, 0xC0	; 192
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	90 81       	ld	r25, Z
 264:	95 ff       	sbrs	r25, 5
 266:	fd cf       	rjmp	.-6      	; 0x262 <USART_Transmit_Char+0x4>
	//cargamos buffer(donde almancenamos dato)
	//irve para leer y transmitir
	UDR0 = data; //espacio en memori que almacena dato de manera temporal
 268:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 26c:	08 95       	ret

0000026e <USART_Transmit_String>:



// Transmits a given string
void USART_Transmit_String(char* string)
{
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	ec 01       	movw	r28, r24
	while(*string != 0x00) { //ultima direccion es 0
 274:	88 81       	ld	r24, Y
 276:	88 23       	and	r24, r24
 278:	31 f0       	breq	.+12     	; 0x286 <USART_Transmit_String+0x18>
 27a:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit_Char(*string);
 27c:	0e 94 2f 01 	call	0x25e	; 0x25e <USART_Transmit_Char>


// Transmits a given string
void USART_Transmit_String(char* string)
{
	while(*string != 0x00) { //ultima direccion es 0
 280:	89 91       	ld	r24, Y+
 282:	81 11       	cpse	r24, r1
 284:	fb cf       	rjmp	.-10     	; 0x27c <USART_Transmit_String+0xe>
		USART_Transmit_Char(*string);
		string++;
	}
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <__udivmodsi4>:
 28c:	a1 e2       	ldi	r26, 0x21	; 33
 28e:	1a 2e       	mov	r1, r26
 290:	aa 1b       	sub	r26, r26
 292:	bb 1b       	sub	r27, r27
 294:	fd 01       	movw	r30, r26
 296:	0d c0       	rjmp	.+26     	; 0x2b2 <__udivmodsi4_ep>

00000298 <__udivmodsi4_loop>:
 298:	aa 1f       	adc	r26, r26
 29a:	bb 1f       	adc	r27, r27
 29c:	ee 1f       	adc	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	a2 17       	cp	r26, r18
 2a2:	b3 07       	cpc	r27, r19
 2a4:	e4 07       	cpc	r30, r20
 2a6:	f5 07       	cpc	r31, r21
 2a8:	20 f0       	brcs	.+8      	; 0x2b2 <__udivmodsi4_ep>
 2aa:	a2 1b       	sub	r26, r18
 2ac:	b3 0b       	sbc	r27, r19
 2ae:	e4 0b       	sbc	r30, r20
 2b0:	f5 0b       	sbc	r31, r21

000002b2 <__udivmodsi4_ep>:
 2b2:	66 1f       	adc	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	88 1f       	adc	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	1a 94       	dec	r1
 2bc:	69 f7       	brne	.-38     	; 0x298 <__udivmodsi4_loop>
 2be:	60 95       	com	r22
 2c0:	70 95       	com	r23
 2c2:	80 95       	com	r24
 2c4:	90 95       	com	r25
 2c6:	9b 01       	movw	r18, r22
 2c8:	ac 01       	movw	r20, r24
 2ca:	bd 01       	movw	r22, r26
 2cc:	cf 01       	movw	r24, r30
 2ce:	08 95       	ret

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
