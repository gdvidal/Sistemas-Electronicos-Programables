
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007aa  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000291  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001290  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001643  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000171b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	
	DDRB |= (1<< DDB3); // config del pin como salida
  80:	23 9a       	sbi	0x04, 3	; 4
	PORTB |= (1<<PORTB3); // estado del pin. nivel de voltaje alto
  82:	2b 9a       	sbi	0x05, 3	; 5
	
	DDRB |= (0<< DDB7); // config como entrada e interruptor
  84:	84 b1       	in	r24, 0x04	; 4
  86:	84 b9       	out	0x04, r24	; 4
	
	
	while (1)
	{
		if (PINB & (1<<DDB7)){ // lectura del pin pb7: si NO esta apretado:
  88:	1f 9b       	sbis	0x03, 7	; 3
  8a:	15 c0       	rjmp	.+42     	; 0xb6 <main+0x36>
			
			PORTB |= (1<<PORTB3);
  8c:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	89 e6       	ldi	r24, 0x69	; 105
  92:	98 e1       	ldi	r25, 0x18	; 24
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x14>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x1e>
  9e:	00 00       	nop
			_delay_ms(500);
			PORTB &= ~ (1<<PORTB3);
  a0:	2b 98       	cbi	0x05, 3	; 5
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	89 e6       	ldi	r24, 0x69	; 105
  a6:	98 e1       	ldi	r25, 0x18	; 24
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x28>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x32>
  b2:	00 00       	nop
  b4:	e9 cf       	rjmp	.-46     	; 0x88 <main+0x8>
			_delay_ms(500);
		}
		
		else{
			PORTB |= (1<<PORTB3);
  b6:	2b 9a       	sbi	0x05, 3	; 5
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	81 ee       	ldi	r24, 0xE1	; 225
  bc:	94 e0       	ldi	r25, 0x04	; 4
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x3e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x48>
  c8:	00 00       	nop
			_delay_ms(100);
			PORTB &= ~ (1<<PORTB3);
  ca:	2b 98       	cbi	0x05, 3	; 5
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	81 ee       	ldi	r24, 0xE1	; 225
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x52>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x5c>
  dc:	00 00       	nop
  de:	d4 cf       	rjmp	.-88     	; 0x88 <main+0x8>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
